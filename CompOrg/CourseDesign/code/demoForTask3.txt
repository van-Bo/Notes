
; //*************************************//
; //                                     //
; //       复杂模型机实验指令文件        //
; //                                     //
; //       By vanBo                  //
; //                                     //
; //*************************************//

; //***** Start Of Main Memory Data *****//

  $P 00 20    ; 0010 ** RD 	START: IN R0, 00H	从 IN 单元读入计数初值到 R0
  $P 01 00    ; P 
  $P 02 61    ; 0110 ** RD		LDI R1, 0FH        	立即数 0FH 送 R1
  $P 03 0F    ; D
  $P 04 14    ; 0001 RS RD		AND R0, R1      		取 R0 低四位到 R0			>> R0 存储 X
  
  $P 05 61    ; 0110 ** RD 	LDI R1, 00H  	     装入和初值 00H 到 R1
  $P 06 00    ; D
  $P 07 F0    ; 1111 M **		BZC RESULT           计数值为 0 则跳转(M 定义寻址模式)      
  $P 08 16    ; D
  $P 09 62    ; 0110 ** RD 	LDI R2, 60H          读入数据始地址到 R2			>> R2 存储地址
  $P 0A 60    ; D
  $P 0B CB    ; 1100 M RD 		LOOP: LAD R3, [RI], 00H      从 MEM 读入数据送 R3，变址寻址，偏移量为 00H 	>> R3 存储最新加载出的加数
  $P 0C 00    ; D
  $P 0D 0D    ; 0000 RS RD 	ADD R1, R3           累加求和, 和值保存到 R1		>> R1 存储初始累加和
  $P 0E 72    ; 0111 ** RD 	INC R2      	     变址寄存加 1，指向下一数据
  $P 0F 63    ; 0110 ** RD 	LDI R3, 01H     	     装入比较值 01H 到 R3
  $P 10 01    ; D
  $P 11 8C    ; 1000 RS RD		SUB R0, R3 	            
  $P 12 F0    ; 1111 M ** 		BZC  RESULT   	     相减为 0，表示求和完毕 
  $P 13 16    ; D
  $P 14 E0    ; 1110 M **		JMP  LOOP            未完则继续
  $P 15 0B    ; D

  $P 16 47    ; 0100 RS RD 	RESULT: MOV R3, R1	R3 存储原始累加和    			     >>> HINT for R3 orignSum <<<
  
  ; ======================================================================
  ; 该模块用于产生移位累加和 R1---shiftSum
  ; 初始数据来源 R3---orignSum
  ; ======================================================================
  $P 17 62    ; 0110 ** RD 	LDI R2, 04H
  $P 18 04    ; D           
  $P 19 A9    ; 1010 RS RD      RR R1, R2			R1 >> R2(3_BACK) >>> R1
  
  ; ======================================================================
  ; 该模块将原始累加和 orignSum、移位累加和 shiftSum 送至对应的内存单元
  ; R1(shiftSum) >>> M(70H)     R3(orignSum) >>> M(71H)
  ; ======================================================================
  $P 1A D1    ; 1101 M RD 		STA 70H, R1  R1 中的右移累加和存于 MEM 的 70H 单元	           >>> HINT for R1 shiftSum <<<
  $P 1B 70    ; D
  $P 1C D3    ; 1101 M RD		STA 71H, R3
  $P 1D 71
  
  ; ======================================================================
  ; 该模块用于产生 R0---resultOfAnd	R2---resultOfSub
  ; 初始数据来源 R3---orignSum  R1---shiftSum
  ; 此模块执行过后 R1 R3 便沦为工作寄存器, 用于后续读取标志和 OUT 单元显示
  ; ======================================================================
  $P 1E 44    ; 	0100 RS RD		MOV R0, R1			R1 送至 R0
  $P 1F 1C    ; 0001 RS RD      AND R0, R3			R0 & R3 >>> R0					>>> HINT for R0 resultOfAnd <<<
  
  $P 20 4E    ; 0100 RS RD      MOV R2, R3			R3 送至 R2
  $P 21 86    ; 1000 RS RD      SUB R2, R1			R2 - R1 >>> R2					>>> HINT for R2 resultOfSub <<<
  
  
  ; ======================================================================
  ; 读取显示标志, OUT 单元进行结果显示
  ; ======================================================================
  $P 22 23    ; 0010 ** RD		IN R3, 00H    从 IN 单元读入结果显示标志到 R3
  $P 23 00    ; D
  $P 24 61    ; 0110 ** RD		LDI R1, F0H	     立即数 F0H 送 R1
  $P 25 F0    ; D
  $P 26 17    ; 0001 RS RD 	AND R3, R1 	     取 R3 高四位，结果存在 R3 中
  
  $P 27 61    ; 0110 ** RD      LDI R1, 00H          立即数 00H 送 R1
  $P 28 00    ; D
  $P 29 87    ; 1000 RS RD      SUB R3, R1 
  $P 2A F0    ; 1111 M ** 		BZC  showResAnd	     若是 0 则显示相减结果 
  $P 2B 30    ; D
  
  $P 2C 30    ; 0011 RS ** 	OUT 40H, R0          R0 送至 OUT 单元, 显示相与结果
  $P 2D 40    ; D
  $P 2E E0    ; 1110 M ** 		JMP START            跳转至 START
  $P 2F 00

  $P 30 38    ; 0011 RS ** 	showResAnd: OUT 40H, R2          R2 送至 OUT 单元, 显示相减结果
  $P 31 40    ; D
  $P 32 E0    ; 1110 M ** 		JMP START            跳转至START
  $P 33 00    ; D
  
  $P 34 50    ; 0101 ** ** 	HLT                  停机

  $P 60 01    ; 数据
  $P 61 02
  $P 62 03
  $P 63 04
  $P 64 05
  $P 65 06
  $P 66 07
  $P 67 08
  $P 68 09
  $P 69 0A
  $P 6A 0B
  $P 6B 0C
  $P 6C 0D
  $P 6D 0E
  $P 6E 0F

; //***** End Of Main Memory Data *****//


; //** Start Of MicroController Data **//

  $M 00 000001    ; NOP
  $M 01 006D43    ; PC->AR, PC加1
  $M 03 107070    ; MEM->IR, P<1>
  $M 04 002405    ; RS->B
  $M 05 04B201    ; A加B->RD
  $M 06 002407    ; RS->B
  $M 07 013201    ; A与B->RD
  $M 08 106009    ; MEM->AR
  $M 09 183001    ; IO->RD
  $M 0A 106010    ; MEM->AR
  $M 0B 000001    ; NOP
  $M 0C 103001    ; MEM->RD
  $M 0D 200601    ; RD->MEM
  $M 0E 005341    ; A->PC
  $M 0F 0000CB    ; NOP, P<3>
  $M 10 280401    ; RS->IO
  $M 11 103001    ; MEM->RD
  $M 12 06B201    ; A加1->RD
  $M 13 002414    ; RS->B
  $M 14 05B201    ; A减B->RD
  $M 15 002416    ; RS->B
  $M 16 01B201    ; A或B->RD
  $M 17 002418    ; RS->B
  $M 18 02B201    ; A右环移->RD
  $M 1B 005341    ; A->PC
  $M 1C 10101D    ; MEM->A
  $M 1D 10608C    ; MEM->AR, P<2>
  $M 1E 10601F    ; MEM->AR
  $M 1F 101020    ; MEM->A
  $M 20 10608C    ; MEM->AR, P<2>
  $M 28 101029    ; MEM->A
  $M 29 00282A    ; RI->B
  $M 2A 04E22B    ; A加B->AR
  $M 2B 04928C    ; A加B->A, P<2>
  $M 2C 10102D    ; MEM->A
  $M 2D 002C2E    ; PC->B
  $M 2E 04E22F    ; A加B->AR
  $M 2F 04928C    ; A加B->A, P<2>
  $M 30 001604    ; RD->A
  $M 31 001606    ; RD->A
  $M 32 006D48    ; PC->AR, PC加1
  $M 33 006D4A    ; PC->AR, PC加1
  $M 34 003401    ; RS->RD
  $M 35 000035    ; NOP
  $M 36 006D51    ; PC->AR, PC加1
  $M 37 001612    ; RD->A
  $M 38 001613    ; RD->A
  $M 39 001615    ; RD->A
  $M 3A 001617    ; RD->A
  $M 3B 000001    ; NOP
  $M 3C 006D5C    ; PC->AR, PC加1
  $M 3D 006D5E    ; PC->AR, PC加1
  $M 3E 006D68    ; PC->AR, PC加1
  $M 3F 006D6C    ; PC->AR, PC加1

; //** End Of MicroController Data **//